<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Themelio Knowledge Base on Themelio knowledge base</title>
    <link>https://docs.themelio.org/</link>
    <description>Recent content in Themelio Knowledge Base on Themelio knowledge base</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2020 Themelio Labs (https://themelio.org/)</copyright>
    <lastBuildDate>Fri, 28 Dec 2018 11:02:05 +0600</lastBuildDate><atom:link href="https://docs.themelio.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Themelio Yellow Paper v1</title>
      <link>https://docs.themelio.org/specifications/yellow/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/yellow/</guid>
      <description>In this &amp;ldquo;yellow paper&amp;rdquo;, we discuss Themelio&amp;rsquo;s abstract model of the state of the blockchain. Themelio uses a richly-scripted coin-based model that is different from both the simple coin-based model of Bitcoin and the accounts-and-contracts model of Ethereum.
 Basic concepts Blockchains as state machines Throughout this yellow paper, we will be discussing Themelio as a transaction-based state machine, a conceptual framework introduced by the creators of Ethereum in their yellow paper.</description>
    </item>
    
    <item>
      <title>Themelio: a stable blockchain for an unstable world</title>
      <link>https://docs.themelio.org/whitepapers/themelio/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/whitepapers/themelio/</guid>
      <description>Abstract Themelio is a decentralized, public blockchain designed to support a new blockchain paradigm, where the blockchain is used as a low-level, stable, and simple root of trust rather than an application or full-featured application platform. We present evidence that this new paradigm is crucial for blockchains to fully realize their key feature of endogenous trust, or trust generated not through preexisting trust in protocol participants but through internal cryptoeconomic mechanisms.</description>
    </item>
    
    <item>
      <title>My first alphanet transaction</title>
      <link>https://docs.themelio.org/try-themelio/alphanet-client/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/try-themelio/alphanet-client/</guid>
      <description>NOTE: Because themelio-core is no longer a single, monolithic binary, this guide is outdated and will soon be replaced.
 This document will guide you through setting up a Themelio alphanet client and sending your first transaction. Before you follow the steps listed here, you probably want to read the introduction to Themelio to understand some basic concepts.
Assumptions All the instructions here assume that
 You&amp;rsquo;re running a Unix (Linux or macOS) system.</description>
    </item>
    
    <item>
      <title>Running an auditor node</title>
      <link>https://docs.themelio.org/try-themelio/auditor-node/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/try-themelio/auditor-node/</guid>
      <description>This document will guide you through setting up an auditor, which is the equivalent of a full node in most other blockchains. An auditor replicates every consensus-confirmed block, validating its contents and ensuring network security while providing a local cache of the entire blockchain state.
Assumptions All the instructions here assume that you have an up-to-date themelio-node binary installed. If not, simply install it with cargo:
$ cargo install --git https://github.</description>
    </item>
    
    <item>
      <title>Synkletos: Themelio&#39;s collusion-resistant consensus mechanism</title>
      <link>https://docs.themelio.org/whitepapers/synkletos/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/whitepapers/synkletos/</guid>
      <description>Abstract In this whitepaper, we discuss Synkletos, the core cryptoeconomic mechanism that powers Themelio&amp;rsquo;s proof-of-stake consensus. Consensus algorithms used to secure public blockchains differ significantly in their design constraints from those driving traditional fault-tolerant distributed systems. This is because blockchains must rigorously model trust within a game-theoretical model, rather than simply making assumptions about fault tolerance. To truly achieve incentive-compatible security, we cannot rely on the typical approach of considering ideal honest behavior and then positing an adversary with certain powers.</description>
    </item>
    
    <item>
      <title>Consensus specification (WIP)</title>
      <link>https://docs.themelio.org/specifications/consensus-spec/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/consensus-spec/</guid>
      <description>In this page, we specify Synkletos, Themelio&amp;rsquo;s consensus algorithm. We give a concrete instantiation of the concepts discussed in the Synkletos whitepaper.
 Basic concepts Let&amp;rsquo;s start by introducing some basic concepts that are needed to understand Synkletos.
Three consensus roles In Themelio, all participants in the blockchain belong to one of three roles:
 Stakers directly participate in consensus. They have stake, denominated in Sym, locked up on-chain, and receive consensus voting power in exchange.</description>
    </item>
    
    <item>
      <title>Melmint v2 specification (WIP)</title>
      <link>https://docs.themelio.org/specifications/tech-melmint/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/tech-melmint/</guid>
      <description>In this page, we will fully specify the actual workings of Melmint on the Themelio blockchain. This is in contrast to the whitepaper, which only provides a high-level design.
We call the mechanism Melmint v2 because it has some several important differences with the &amp;ldquo;paper&amp;rdquo; Melmint version.
 Introduction &amp;ldquo;Paper Melmint&amp;rdquo; In our original publication, Melmint is divided into two halves:
 A DOSC/sym auction that establishes a DOSC/sym exchange rate A mel/sym exchange guarantee that allows anybody to destroy 1 mel in exchange for $k$ DOSC worth of newly printed syms, or vice versa, minus a small fee.</description>
    </item>
    
    <item>
      <title>Melmint: trustless stable cryptocurrency</title>
      <link>https://docs.themelio.org/whitepapers/melmint/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/whitepapers/melmint/</guid>
      <description>Note: this is a minimally revised version of a paper we published at CryptoEconSys 2020
Decentralized cryptocurrencies have gathered increasing interest in the past few years, raising hopes of a new era of non-sovereign electronic money. Unfortunately, cryptocurrencies perform poorly as actual money due to their unacceptably volatile purchasing power. &amp;ldquo;Stablecoins&amp;rdquo; aiming to reduce this volatility, on the other hand, tend to peg to an external currency like the US dollar, gravely weakening the decentralization that makes cryptocurrencies so attractive.</description>
    </item>
    
    <item>
      <title>Melnet specification (WIP)</title>
      <link>https://docs.themelio.org/specifications/melnet-spec/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/melnet-spec/</guid>
      <description>Melnet is an almost trivial request/response protocol that underpins Themelio&amp;rsquo;s peer-to-peer network.
Basic semantics Each peer-to-peer network is identified with a netname, which is sent with all requests.
The only kind of communication pattern is a simple request-response, which is sent over a TCP connection. The way the connection is used is similar to HTTP/1.1: the client sends a request over a connection, waiting for the response before sending another one.</description>
    </item>
    
    <item>
      <title>MelVM: low-level covenant VM </title>
      <link>https://docs.themelio.org/specifications/melvm-specification/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/melvm-specification/</guid>
      <description>Overview MelVM is the low-level, stack-based virtual machine that powers Themelio covenants. By only allowing looping for a fixed number of iterations, MelVM makes the worst-case cost of each covenant computable, trading off Turing completeness. Unlike Bitcoin scripts, however, MelVM covenants can compute all primitive recursive functions, allowing expressing almost all &amp;ldquo;interesting&amp;rdquo; constructs.
Memory model MelVM uses a Harvard architecture where the code itself is not part of the memory space.</description>
    </item>
    
    <item>
      <title>MelScript: high-level covenant language (WIP)</title>
      <link>https://docs.themelio.org/specifications/melscript-specification/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/melscript-specification/</guid>
      <description>The high-level MelScript language is essentially an extension of simply typed lambda calculus, packaged in a friendly syntax.
Structure of a MelScript covenant A MelScript covenant consists of zero or more definitions followed by a single expression. Each definition itself follows an analogous structure.
Here&amp;rsquo;s an example that constraints a coin to only be spent in a transaction whose total output in micromels is odd, and has less than 16 outputs:</description>
    </item>
    
    <item>
      <title>Fastsync protocol</title>
      <link>https://docs.themelio.org/specifications/fastsync/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/fastsync/</guid>
      <description>The fastsync protocol is used by both stakers and auditors to catch up to the latest confirmed SealedState without starting from the genesis block and applying block after block.
This is done through a two-step process:
 The &amp;ldquo;catcher-up&amp;rdquo; does a InitFastSync request. The server responds with a host:port where the fastsync protocol will be run. The catcher-up connects to host:port over TCP and initiates the fastsync protocol. This consists of the server serializing the entire state and streaming it, while the client receives.</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>https://docs.themelio.org/specifications/glossary/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://docs.themelio.org/specifications/glossary/</guid>
      <description>State elements constitute the components of the world state
 Blocks are defined by their constituent transactions, optionally with a consensus proof Consensus proofs are attached to blocks, turning them into confirmed blocks. The world state contains history and coin state   Each transaction has:
 Transaction inputs, each of which spends a coin (mapping in the coin state) by unlocking its covenant Transaction outputs, each of which has a value, a denomination, and a MelVM covenant Attached data   Currencies:</description>
    </item>
    
  </channel>
</rss>
